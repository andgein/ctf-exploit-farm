import aiohttp
import async_timeout

from backends.flag_submitter import AbstractFlagSubmitter
from farm import models as models


class DVFarmFlagSubmitter(AbstractFlagSubmitter):
    """
    Flag submitter to Destructive Voice farm server
    https://github.com/DestructiveVoice/DestructiveFarm
    """

    TIMEOUT = 10  # For sending one bunch of flags. In seconds

    def __init__(self, host, auth_token=''):
        super().__init__()
        self._host = host
        self.url = self._build_url(host)
        self._headers = {}
        if auth_token:
            self._headers['X-Token'] = auth_token

    async def send_flags(self, flags: [models.Flag]):
        for try_index in range(3):
            try:
                await self._try_send_flags(flags)
            except Exception as e:
                if try_index < 2:
                    self.logger.warning(
                        f'Can\'t send flags to flag server: {e}. '
                        f'Let\'s try one more time (it was try {try_index + 1} from 3)'
                    )
                else:
                    raise

        for flag in flags:
            flag.mark_as_send()

    async def _try_send_flags(self, flags: [models.Flag]):
        flags_data = [{'flag': flag.flag, 'sploit': flag.exploit_name, 'team': flag.team} for flag in flags]

        async with aiohttp.ClientSession() as session:
            with async_timeout.timeout(self.TIMEOUT):
                async with session.post(self.url, headers=self._headers, json=flags_data) as request:
                    if request.status != 200:
                        raise Exception(f'Server returned HTTP status code {request.status}, it\'s bad')

    @staticmethod
    def _build_url(host):
        return f'http://{host}/api/post_flags'
