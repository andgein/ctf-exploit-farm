import asyncio

import collections

import farm.models as models
from farm import defaults
from farm.logging import Logger


class AbstractFlagStorage:
    async def add_flags(self, flags: [str], exploit_name: str, team: str):
        if len(flags) == 0:
            return
        await asyncio.wait([self.add_flag(models.Flag(flag, exploit_name, team)) for flag in flags])

    async def add_flag(self, flag: models.Flag):
        raise NotImplementedError('Can\'t add flag to storage: %s doesn\'t specify add_flag(flag)' % self.__class__.__name__)

    async def get_not_sent_flags(self, limit=30):
        raise NotImplementedError('Can\'t get not sent flag from storage: %s doesn\'t specify get_not_sent_flags(flag)' % self.__class__.__name__)


class DirectoryFlagStorage(AbstractFlagStorage):
    def __init__(self, directory=defaults.FLAG_STORAGE_DIRECTORY):
        self._logger = Logger(self)

        self.directory = directory
        self._current_flags = collections.deque()
        self._all_flags = set()

    async def add_flag(self, flag: models.Flag):
        if flag.flag not in self._all_flags:
            self._current_flags.append(flag)
            self._logger.info(f'Added flag [{flag}] to the storage. Current size of storage is {len(self._current_flags)}')
            self._all_flags.add(flag.flag)
        else:
            self._logger.debug(f'Flag [{flag}] is duplicating, don\'t add it to the storage')
        
    async def get_not_sent_flags(self, limit=30):
        not_sent_flags = []
        while self._current_flags and len(not_sent_flags) < limit:
            flag = self._current_flags.popleft()
            if flag.status == models.FlagStatus.DONT_SEND:
                not_sent_flags.append(flag)
                
        # Continue monitoring not sent flags, but add them to the end of queue
        self._current_flags.extend(not_sent_flags)
        # TODO (andgein): Write not fetched flags to file
        return not_sent_flags
